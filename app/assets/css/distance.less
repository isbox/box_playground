@distance_locate: l left, r right, t top, b bottom;
@distance_locate_length: length(@distance_locate);

@distance_type: p padding, m margin;
@distance_type_length: length(@distance_type);

.distance(@as_type, @type, @as_locate, @locate, @num: 1) when (@num <= @mp_scope) {
    .@{as_type}@{as_locate}-@{num} {
        @{type}-@{locate}: @num * 0.05rem;
    }
    .distance(@as_type, @type, @as_locate, @locate, @num + 1);
}

.distance-locate(@as_type, @type, @len: 1) when (@len <= @distance_locate_length) {
    @target: extract(@distance_locate, @len);
    @key: extract(@target, 1);
    @value: extract(@target, 2);

    .distance(@as_type, @type, @key, @value);
    .distance-locate(@as_type, @type, @len + 1);
}

.distance-type(@len: 1) when (@len <= @distance_type_length) {
    @target: extract(@distance_type, @len);
    @key: extract(@target, 1);
    @value: extract(@target, 2);

    .distance-locate(@key, @value);
    .distance-type(@len + 1);
}

.distance-type();

.m-0 {
    margin: 0;
}

.p-0 {
    padding: 0;
}